# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/00_reader.ipynb.

# %% auto 0
__all__ = ['read_pda']

# %% ../notebooks/00_reader.ipynb 12
import re 
import numpy as np  


# %% ../notebooks/00_reader.ipynb 13
def read_pda(filename, sep='\t', encoding='utf-8-sig', thousand_sep=','): 
    '''Read Thermo PDA text file. 
    
    Returns: header, nms, times, pda_data 
    '''
    
    # add encoding to skip Byte Order Mark (BOM) in first line  
    # https://stackoverflow.com/questions/17912307/u-ufeff-in-python-string  

    with open(filename, 'r', encoding=encoding) as fh: 
        lines = fh.readlines()
            
    # header block should contains less columns then data block 
    # find maximum number of columns 
    ncols_list = []

    for i, line in enumerate(lines): 

        ncols = len(re.split('\t', line))
        ncols_list.append(ncols)

    ncols_list = np.array(ncols_list)

    ncols = max(ncols_list)

    is_data = ncols_list == ncols
    
    # split lines into header, nms line and data lines 
    header_lines = np.array(lines)[~is_data]
    header = ''.join(header_lines)

    nms_line = np.array(lines)[is_data][0]
    data_lines = np.array(lines)[is_data][1:]
    n_datarows = len(data_lines) 
    
    # find wavelength columns 
    
    # remove stupid thousand separator 
    nms_line = re.sub(thousand_sep, '', nms_line)  
    
    # split nms_line and select numerical column headers with nm values 
    
    names = re.split('\t', nms_line) # Time (min)\tIntegr.Time (s)\t190.0\t195.0 ... \t640.0
    num_ptrn = re.compile('^\s*\d+\.*\d*\s*$')
    is_num = [bool(num_ptrn.match(i)) for i in names]

    nms = np.array(names)[is_num].astype(float) 
    n_datacols = len(nms) 

    # initialize arrays 
    pda_data = np.zeros([n_datarows, n_datacols])
    times = np.zeros([n_datarows])

    # parse data lines 

    for i, line in enumerate(data_lines): 

        #print(f'Parsing line: {i}', end='\r')

        # remove all stupid thousand separator commas to allow conversion to floats
        line = re.sub(thousand_sep, '', line) 

        values = np.array(re.split('\t', line))

        pda_data[i] = values[is_num].astype(float)
        times[i] = values[0].astype(float)
      
    return header, nms, times, pda_data
